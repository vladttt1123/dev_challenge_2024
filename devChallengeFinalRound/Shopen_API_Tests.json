{
	"info": {
		"_postman_id": "1cd07f99-bedd-4444-99bd-6adf471fa158",
		"name": "Shopen_API_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19132779",
		"_collection_link": "https://dark-space-344760.postman.co/workspace/CornerstoneEnv~cbeea66b-ea1d-4051-81bc-9c71df2410b6/collection/19132779-1cd07f99-bedd-4444-99bd-6adf471fa158?action=share&source=collection_link&creator=19132779"
	},
	"item": [
		{
			"name": "general",
			"item": [
				{
					"name": "01_Authentication",
					"item": [
						{
							"name": "happyPath",
							"item": [
								{
									"name": "1 . UserRegistrationTest[USER]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber1 = Math.floor(Math.random() * 100000) + 1;",
													"const randomNumber2 = Math.floor(Math.random() * 100000) + 1;",
													"const uniqueUsername = `customer-${randomNumber1}-user-${randomNumber2}`;",
													"",
													"pm.collectionVariables.set(\"uniqueUsername\", uniqueUsername);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"const response = pm.response.json();",
													"",
													"pm.test(\"check if user is successfully registered\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"check if token is not empty\", function () {",
													"  pm.expect(pm.response.json()).to.have.property('token').that.is.not.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"apiKeyUSER\", response.token);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{uniqueUsername}}\",\n  \"password\": \"mypassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"register"
											]
										},
										"description": "Register to the system. Returns a token to be used in Authentication header"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"register"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"register"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2 . UserRegistrationTest[ADMIN]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber1 = Math.floor(Math.random() * 100000) + 1;",
													"const randomNumber2 = Math.floor(Math.random() * 100000) + 1;",
													"const uniqueUsername = `customer-${randomNumber1}-user-${randomNumber2}`;",
													"",
													"pm.collectionVariables.set(\"uniqueUsername\", uniqueUsername);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"const response = pm.response.json();",
													"",
													"pm.test(\"check if user is successfully registered\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"check if token is not empty\", function () {",
													"  pm.expect(pm.response.json()).to.have.property('token').that.is.not.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"apiKey\", response.token);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{uniqueUsername}}\",\n  \"password\": \"mypassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"register"
											]
										},
										"description": "Register to the system. Returns a token to be used in Authentication header"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"register"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"register"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. UserLoginTest [ADMIN]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"pm.collectionVariables.set(\"apiKey\", response.token);",
													"",
													"pm.test(\"check if user is successfully logged in\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check if token is not empty\", function () {",
													"  pm.expect(pm.response.json()).to.have.property('token').that.is.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{uniqueUsername}}\",\n  \"password\": \"mypassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"login"
											]
										},
										"description": "Login to the system. Returns a token to be used in Authentication header"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"login"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "errorHandling",
							"item": [
								{
									"name": "1. UserLoginWithInvalidCredentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check if user cannot login with invalid credentials expects 401'\", function () {",
													"    pm.response.to.have.status(401);",
													"  pm.expect(pm.response.json().message).to.equal('User does not exist or password is incorrect');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"THIS_IS_AN_INVALID_USERNAME\",\n  \"password\": \"THIS_IS_AN_INVALID_PASSWORD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"login"
											]
										},
										"description": "Login to the system. Returns a token to be used in Authentication header"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"login"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "02_User Management",
					"item": [
						{
							"name": "happyPath",
							"item": [
								{
									"name": "1. GetUserInfoTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"user_id\", response.id);",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check get user info fields\", function () {",
													"    pm.expect(response.id).to.exist.and.to.be.a('number');",
													"    pm.expect(response.username).to.be.a('string');",
													"    pm.expect(response.role).to.be.a('string');",
													"    pm.expect(response.role).to.exist.and.to.equal('customer');",
													"    pm.expect(response.credit).to.be.a('number');",
													"    pm.expect(response.credit).to.exist.and.to.equal(0.0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"me"
											]
										},
										"description": "Get info of the authenticated user by token"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"me"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "2. PromoteUserToAdminTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"",
													"pm.test(\"check if user is successfully promoted\", function () {",
													"  pm.response.to.have.status(200);",
													"  pm.expect(response.message).to.eql(\"User promoted\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"promote"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Promote 'customer' to 'admin'"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"promote"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"promote"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. GetUserInfoAboutAdminTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check get user info fields\", function () {",
													"    pm.expect(response.id).to.exist.and.to.be.a('number');",
													"    pm.expect(response.username).to.be.a('string');",
													"    pm.expect(response.role).to.be.a('string');",
													"    pm.expect(response.role).to.exist.and.to.equal('admin');",
													"    pm.expect(response.credit).to.be.a('number');",
													"    pm.expect(response.credit).to.exist.and.to.equal(0.0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"me"
											]
										},
										"description": "Get info of the authenticated user by token"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/me",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"me"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "4. EditUserDetailsTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response message is 'User edited'\", function () {",
													"  pm.expect(response.message).to.equal('User edited');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber1 = Math.floor(Math.random() * 100000) + 1;",
													"const randomNumber2 = Math.floor(Math.random() * 100000) + 1;",
													"const userNameForEdit = `customer-${randomNumber1}-EDITED-NAME-${randomNumber2}`;",
													"",
													"pm.collectionVariables.set(\"userNameForEdit\", userNameForEdit);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{userNameForEdit}}\",\n  \"password\": \"changedPassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"edit"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										},
										"description": "Can change username and password. Admins can edit any user"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"edit"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"edit"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "5. Set user credit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"check is credit is set\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check if message is correct\", function () {",
													"    pm.expect(\"User credit set\").to.eql(response.message);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1000 and 10000",
													"const randomCreditAmount = Math.floor(Math.random() * (10000 - 1000 + 1)) + 1000;",
													"",
													"pm.collectionVariables.set(\"randomCreditAmount\", randomCreditAmount);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit={{randomCreditAmount}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"credit"
											],
											"query": [
												{
													"key": "credit",
													"value": "{{randomCreditAmount}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Set user credit by admin to make purchases"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "errorHandling",
							"item": [
								{
									"name": "1. PromoteNotExistingUserToAdminTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Check if user gets an error when promoting not existing customert\", function () {",
													"  pm.response.to.have.status(400);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"User not found\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNegativeNumber = Math.floor(Math.random() * (-100 - (-1) + 1)) - 1;",
													"",
													"pm.collectionVariables.set(\"randomNegativeNumber\", randomNegativeNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"promote"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{randomNegativeNumber}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Promote 'customer' to 'admin'"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"promote"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/promote",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"promote"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. EditUserDetailsOfNotExistingUserTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Check if user gets an error when editing not existing customert\", function () {",
													"  pm.response.to.have.status(400);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"User not found\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber1 = Math.floor(Math.random() * 100000) + 1;",
													"const randomNumber2 = Math.floor(Math.random() * 100000) + 1;",
													"const userNameForEdit = `customer-${randomNumber1}-EDITED-NAME-${randomNumber2}`;",
													"",
													"pm.collectionVariables.set(\"userNameForEdit\", userNameForEdit);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{userNameForEdit}}\",\n  \"password\": \"changedPassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"edit"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "999999999"
												}
											]
										},
										"description": "Can change username and password. Admins can edit any user"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"edit"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/edit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"edit"
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. SetCreditForNotExistingUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Check if user gets an error when setting credit for not existing customer\", function () {",
													"  pm.response.to.have.status(400);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"User not found\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNegativeNumber = Math.floor(Math.random() * (-100 - (-1) + 1)) - 1;",
													"pm.collectionVariables.set(\"randomNegativeNumber\", randomNegativeNumber);",
													"",
													"const randomCreditAmount = Math.floor(Math.random() * (10000 - 1000 + 1)) + 1000;",
													"",
													"pm.collectionVariables.set(\"randomCreditAmount\", randomCreditAmount);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit={{randomCreditAmount}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"credit"
											],
											"query": [
												{
													"key": "credit",
													"value": "{{randomCreditAmount}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{randomNegativeNumber}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Set user credit by admin to make purchases"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "4. SetCreditWithNotAdminTokenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Check if not admin can get set credit amount\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Only admins can set user credit\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomCreditAmount = Math.floor(Math.random() * (10000 - 1000 + 1)) + 1000;",
													"",
													"pm.collectionVariables.set(\"randomCreditAmount\", randomCreditAmount);",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKeyUSER}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit={{randomCreditAmount}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"user",
												":user_id",
												"credit"
											],
											"query": [
												{
													"key": "credit",
													"value": "{{randomCreditAmount}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Set user credit by admin to make purchases"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/user/:user_id/credit?credit=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"user",
														":user_id",
														"credit"
													],
													"query": [
														{
															"key": "credit",
															"value": "<number>"
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "03_Pen Management",
					"item": [
						{
							"name": "happyPath",
							"item": [
								{
									"name": "1. AddPenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"pen_id\", response.id);",
													"",
													"pm.test(\"check if pen is successfully added\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"check get pen info fields\", function () {",
													"    pm.expect(response.id).to.exist.and.to.be.a('number');",
													"    pm.expect(response.brand).to.be.a('string');",
													"    pm.expect(response.price).to.be.a('number');",
													"    pm.expect(response.stock).to.be.a('number');",
													"    pm.expect(response.color).to.be.a('string');",
													"    pm.expect(response.length).to.be.a('number');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brand\": \"TEST_PEN\",\n  \"price\": 10,\n  \"stock\": 100000,\n  \"color\": \"black\",\n  \"length\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"add"
											]
										},
										"description": "Add a new pen to the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. GetPenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"let returnedPenId = response.id;",
													"let expectedPenId = pm.collectionVariables.get(\"pen_id\");",
													"",
													"pm.test(\"Check if the pen ID matches\", function () {",
													"    pm.expect(returnedPenId).to.eql(expectedPenId);",
													"});",
													"",
													"var schema = {",
													"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"    \"$id\": \"http://example.com/root.json\",",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"id\": { \"type\": \"integer\" },",
													"        \"brand\": { \"type\": \"string\" },",
													"        \"price\": { \"type\": \"number\" },",
													"        \"stock\": { \"type\": \"number\" },",
													"        \"color\": { \"type\": \"string\" },",
													"        \"length\": { \"type\": \"integer\" }",
													"    },",
													"    \"required\": [\"id\", \"brand\", \"price\", \"stock\", \"color\", \"length\"],",
													"    \"title\": \"Pen Schema\",",
													"    \"description\": \"Schema for pen details in the response.\"",
													"};",
													"pm.test('Schema validation', () => {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												":pen_id"
											],
											"variable": [
												{
													"key": "pen_id",
													"value": "{{pen_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Get pen by id. No authentication required"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. GetPensTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check successful response \", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"const schema = {",
													"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"pens\": {",
													"            \"type\": \"array\",",
													"            \"items\": {",
													"                \"type\": \"object\",",
													"                \"required\": [\"id\", \"brand\", \"price\", \"stock\", \"color\", \"length\"]",
													"            }",
													"        }",
													"    },",
													"    \"required\": [\"pens\"]",
													"};",
													"",
													"pm.test('Schema validation for GET /pens', () => {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens"
											],
											"query": [
												{
													"key": "brand",
													"value": "<string>",
													"description": "name of brands, coma separated",
													"disabled": true
												},
												{
													"key": "brand",
													"value": "<string>",
													"description": "name of brands, coma separated",
													"disabled": true
												},
												{
													"key": "minPrice",
													"value": "<number>",
													"description": "minimum pen price",
													"disabled": true
												},
												{
													"key": "maxPrice",
													"value": "<number>",
													"description": "maximum pen price",
													"disabled": true
												},
												{
													"key": "minStock",
													"value": "<integer>",
													"description": "minimum pens in stock",
													"disabled": true
												},
												{
													"key": "color",
													"value": "<string>",
													"description": "name of colors, coma separated",
													"disabled": true
												},
												{
													"key": "color",
													"value": "<string>",
													"description": "name of colors, coma separated",
													"disabled": true
												},
												{
													"key": "minLength",
													"value": "<integer>",
													"description": "minimum pen length",
													"disabled": true
												},
												{
													"key": "maxLength",
													"value": "<integer>",
													"description": "maximum pen length",
													"disabled": true
												}
											]
										},
										"description": "List pens in the system. No authentication required"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens?brand=<string>&brand=<string>&minPrice=<number>&maxPrice=<number>&minStock=<integer>&color=<string>&color=<string>&minLength=<integer>&maxLength=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens"
													],
													"query": [
														{
															"key": "brand",
															"value": "<string>"
														},
														{
															"key": "brand",
															"value": "<string>"
														},
														{
															"key": "minPrice",
															"value": "<number>"
														},
														{
															"key": "maxPrice",
															"value": "<number>"
														},
														{
															"key": "minStock",
															"value": "<integer>"
														},
														{
															"key": "color",
															"value": "<string>"
														},
														{
															"key": "color",
															"value": "<string>"
														},
														{
															"key": "minLength",
															"value": "<integer>"
														},
														{
															"key": "maxLength",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens?brand=<string>&brand=<string>&minPrice=<number>&maxPrice=<number>&minStock=<integer>&color=<string>&color=<string>&minLength=<integer>&maxLength=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens"
													],
													"query": [
														{
															"key": "brand",
															"value": "<string>"
														},
														{
															"key": "brand",
															"value": "<string>"
														},
														{
															"key": "minPrice",
															"value": "<number>"
														},
														{
															"key": "maxPrice",
															"value": "<number>"
														},
														{
															"key": "minStock",
															"value": "<integer>"
														},
														{
															"key": "color",
															"value": "<string>"
														},
														{
															"key": "color",
															"value": "<string>"
														},
														{
															"key": "minLength",
															"value": "<integer>"
														},
														{
															"key": "maxLength",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "4. RequestPensTest",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumberFrom1to10 = Math.floor(Math.random() * 10) + 1;",
													"",
													"pm.collectionVariables.set(\"randomNumberFrom1to10\", randomNumberFrom1to10);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"let userId = pm.collectionVariables.get(\"user_id\");",
													"",
													"pm.collectionVariables.set(\"transaction_id\", response.id);",
													"",
													"pm.test(\"check successful response pen request \", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check response for order details\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.status).to.equal(\"requested\");",
													"",
													"    pm.expect(responseData.userId).to.equal(userId);",
													"",
													"    pm.expect(responseData).to.have.property(\"id\");",
													"    pm.expect(responseData).to.have.property(\"price\");",
													"    pm.expect(responseData).to.have.property(\"timestamp\");",
													"    pm.expect(responseData).to.have.property(\"order\");",
													"    pm.expect(responseData.order).to.be.an('array').that.is.not.empty;",
													"    pm.expect(responseData.order[0]).to.have.property(\"penId\");",
													"    pm.expect(responseData.order[0]).to.have.property(\"number\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"order\": [\n    {\n      \"id\": {{pen_id}},\n      \"count\": {{randomNumberFrom1to10}}\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/request",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												"request"
											]
										},
										"description": "Create a new transaction request in state requested"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "5. RestockPenTest",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
													"",
													"",
													"pm.collectionVariables.set(\"randomNumber\", randomNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"check successful restock\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{pen_id}},\n  \"count\": {{randomNumber}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/restock",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"restock"
											]
										},
										"description": "Restock a pen in the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"count\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/restock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"restock"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"count\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/restock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"restock"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "errorHandling",
							"item": [
								{
									"name": "1. AddInvalidPenTestWithNoBrand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"check if the erroris present added if brand is not specified\", function () {",
													"  pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n  \"price\": 10,\n  \"stock\": 100000,\n  \"color\": \"black\",\n  \"length\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"add"
											]
										},
										"description": "Add a new pen to the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. AddInvalidPenTestWithInvalidPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"// this test fails ebcuase of the bug, expected 422 or 404",
													"pm.test(\"check if the erroris present added if price is negative value\", function () {",
													"  pm.response.to.have.status(422);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"brand\": \"TEST_PEN\",\n  \"price\": {{randomNegativeNumber}},\n  \"stock\": 100000,\n  \"color\": \"black\",\n  \"length\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"add"
											]
										},
										"description": "Add a new pen to the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. GetNotExistingPenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response message contains 'Pen not found'\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.expect(pm.response.json().message).to.include('Pen not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												":pen_id"
											],
											"variable": [
												{
													"key": "pen_id",
													"value": "99999",
													"description": "(Required) "
												}
											]
										},
										"description": "Get pen by id. No authentication required"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "4. RequestPensWithNegativeCountTest",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNegativeNumber = Math.floor(Math.random() * (-100 - (-1) + 1)) - 1;",
													"",
													"pm.collectionVariables.set(\"randomNegativeNumber\", randomNegativeNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check error if pen count is negativve number \", function () {",
													"  pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"order\": [\n    {\n    \"id\": {{pen_id}},\n    \"count\": {{randomNegativeNumber}}\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/request",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												"request"
											]
										},
										"description": "Create a new transaction request in state requested"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "5. RequestPensWithInvalidTokenCountTest",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNegativeNumber = Math.floor(Math.random() * (-100 - (-1) + 1)) - 1;",
													"",
													"pm.collectionVariables.set(\"randomNegativeNumber\", randomNegativeNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check pen request with invlaid token\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Could not validate credentials\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "InvalidToken",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"order\": [\n    {\n    \"id\": {{pen_id}},\n    \"count\": {{randomNumberFrom1to10}}\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/request",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												"request"
											]
										},
										"description": "Create a new transaction request in state requested"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"order\": [\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"count\": \"<integer>\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/request",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														"request"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "6. AddPenAsNotAdminTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"",
													"pm.test(\"Check if not admin can add pens\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Only admins can add pens\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKeyUSER}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"brand\": \"TEST_PEN\",\n  \"price\": 10,\n  \"stock\": 100000,\n  \"color\": \"black\",\n  \"length\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/add",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"add"
											]
										},
										"description": "Add a new pen to the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"brand\": \"<string>\",\n  \"price\": \"<number>\",\n  \"stock\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"length\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/add",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"add"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "7. RestockPenAsNotAdminTest",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber = Math.floor(Math.random() * 1000) + 1;",
													"",
													"",
													"pm.collectionVariables.set(\"randomNumber\", randomNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"",
													"pm.test(\"Check if not admin can restock pens\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Only admins can restock pens\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKeyUSER}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{pen_id}},\n  \"count\": {{randomNumber}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/restock",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												"restock"
											]
										},
										"description": "Restock a pen in the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"count\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/restock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"restock"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"count\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/restock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														"restock"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "04_Transaction_Management",
					"item": [
						{
							"name": "happyPath",
							"item": [
								{
									"name": "1. GetTransactionsTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check if status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions"
											],
											"query": [
												{
													"key": "showOwn",
													"value": "<boolean>",
													"description": "show only transactions of the user",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"description": "filter by status: requested, completed, cancelled, refunded",
													"disabled": true
												}
											]
										},
										"description": "List transactions in the system"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions?showOwn=<boolean>&status=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions"
													],
													"query": [
														{
															"key": "showOwn",
															"value": "<boolean>"
														},
														{
															"key": "status",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions?showOwn=<boolean>&status=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions"
													],
													"query": [
														{
															"key": "showOwn",
															"value": "<boolean>"
														},
														{
															"key": "status",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. GetTransactionTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"",
													"// the test case  fails due to the bug",
													"pm.test(\"expect status  code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Check if the status is \"requested\"",
													"pm.test(\"check transaction status\", function () {",
													"    pm.expect(response.status).to.eql(\"requested\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Get transaction by id"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. CompleteTransactionTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"check is transaction is successfully completed\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check if message is correct\", function () {",
													"    pm.expect(response.message).to.eql(\"Transaction completed\")",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/complete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id",
												"complete"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Pens amount are reduced as well as user credit"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/complete",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"complete"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/complete",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"complete"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "4. GetTransactionTestExpectsCompleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"",
													"// the test case  fails due to the bug",
													"pm.test(\"check if status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Check if the status is \"completed\"",
													"pm.test(\"check transaction status\", function () {",
													"    pm.expect(response.status).to.eql(\"completed\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id"
											],
											"query": [
												{
													"key": "showOwn",
													"value": "<boolean>",
													"description": "show only transactions of the user",
													"disabled": true
												},
												{
													"key": "status",
													"value": "<string>",
													"description": "filter by status: requested, completed, cancelled, refunded",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}"
												}
											]
										},
										"description": "List transactions in the system"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions?showOwn=<boolean>&status=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions"
													],
													"query": [
														{
															"key": "showOwn",
															"value": "<boolean>"
														},
														{
															"key": "status",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions?showOwn=<boolean>&status=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions"
													],
													"query": [
														{
															"key": "showOwn",
															"value": "<boolean>"
														},
														{
															"key": "status",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "4. CancelTransactionTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"check is transaction is cancelled\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check if message is correct\", function () {",
													"    pm.expect(\"Transaction cancelled\").to.eql(response.message);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/cancel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id",
												"cancel"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Cancel a requested transaction"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"cancel"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/cancel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"cancel"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "5 .RefundTransactionTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"",
													"// the test case  fails due to the bug",
													"pm.test(\"check is transaction is refunded\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/refund",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id",
												"refund"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Refund a completed transaction"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/refund",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"refund"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id/refund",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id",
														"refund"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "errorHandling",
							"item": [
								{
									"name": "1. GetNotExistingTransactionTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"",
													"pm.test(\"expect status  code is 200\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"check transaction status\", function () {",
													"    pm.expect(response.message).to.eql(\"Transaction not found\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{randomNegativeNumber}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Get transaction by id"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. GetTransactionInvalidTokenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"expect status  code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"check transaction status\", function () {",
													"    pm.expect(response.message).to.eql(\"Could not validate credentials\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "InvalidToken",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"transactions",
												":transaction_id"
											],
											"variable": [
												{
													"key": "transaction_id",
													"value": "{{transaction_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Get transaction by id"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/transactions/:transaction_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"transactions",
														":transaction_id"
													],
													"variable": [
														{
															"key": "transaction_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "05_Cleanup",
					"item": [
						{
							"name": "happyPath",
							"item": [
								{
									"name": "1. DeletePenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check if pen has been deleted\", function () {",
													"  pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												":pen_id"
											],
											"variable": [
												{
													"key": "pen_id",
													"value": "{{pen_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete a pen from the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "errorHandling",
							"item": [
								{
									"name": "1. DeletePenAsNotAdminTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check if customer is not able to delete pen\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Only admins can delete pens\" });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKeyUSER}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												":pen_id"
											],
											"variable": [
												{
													"key": "pen_id",
													"value": "{{pen_id}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete a pen from the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "2. DeleteNotExistingPenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"check if it is not possible to delete not existing user\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNegativeNumber = Math.floor(Math.random() * (-100 - (-1) + 1)) - 1;",
													"pm.collectionVariables.set(\"randomNegativeNumber\", randomNegativeNumber);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pens",
												":pen_id"
											],
											"variable": [
												{
													"key": "pen_id",
													"value": "{{randomNegativeNumber}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete a pen from the system. Admins only"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pens/:pen_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pens",
														":pen_id"
													],
													"variable": [
														{
															"key": "pen_id",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "3. UserLogoutWithInvalidTokenTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Checkuser log out with InvalidToken\", function () {",
													"  pm.response.to.have.status(403);",
													"  pm.expect(pm.response.json()).to.eql({ message: \"Could not validate credentials\" });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "InvalidToken",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"logout"
											]
										},
										"description": "Logout from the system"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/users/logout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"logout"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "4. UserLogoutTest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check if user is successfully logged out\", function () {",
											"  pm.response.to.have.status(200);",
											"  pm.expect(pm.response.json()).to.eql({ message: \"Logged out\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"logout"
									]
								},
								"description": "Logout from the system"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"logout"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://shopen.qamania.org",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "uniqueUsername",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "userNameForEdit",
			"value": "",
			"type": "string"
		},
		{
			"key": "pen_id",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "randomNumberFrom1to10",
			"value": ""
		},
		{
			"key": "transaction_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomCreditAmount",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNegativeNumber",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomCredit",
			"value": "",
			"type": "string"
		},
		{
			"key": "apiKeyUSER",
			"value": "",
			"type": "string"
		}
	]
}